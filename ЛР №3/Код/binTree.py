# Функция gen_bin_tree() принимает на вход 4 аргумента: 2 типа int и два типа function <lambda>
# height отвечает за высоту дерева, root – за корень дерева, right_leaf и left_leaf – за значение листьев дерева
def gen_bin_tree(height=4, root=8, right_leaf=lambda x: x * x, left_leaf=lambda x: x + x / 2):
    # При высоте, равной нулю, выводим только корень бинарного дерева
    if height == 0:
        return (root)

    # При отрицательной высоте дерева не существует => ничего не возвращаем
    if height < 0:
        return None
    
    # Выполняем цикл ниже до тех пор, пока не получим "поддерево" высотой 1
    while height > 1:
        # Находим значения листьев и записываем их в переменные
        left = left_leaf(root)
        right = right_leaf(root)
        # Возвращаем словарь, ключом в котором является корень, а значением – кортеж листьев
        # Листья в кортеже представляют из себя результаты работы функции при меньшей на 1 высоте
        return {root: (gen_bin_tree(height - 1, left), gen_bin_tree(height - 1, right))}
        
    # Возвращаем последнее "поддерево", если не попадепм в цикл
    # Высота последнего поддерева равна 1
    return {root: (root + root/2, root**2)}


print(gen_bin_tree())

"""
Получившееся бинарное дерево при значениях gen_bin_tree(4, 8):
{8:(
    {12.0: (
        {18.0:(
            {27.0: (
                40.5, 729.0
            )}, 
            {324.0: (
                486.0, 104976.0
            )}
        )},
        {144.0: (
            {216.0: (
                324.0, 46656.0
            )}, 
            {20736.0: (
                31104.0, 429981696.0
            )}
        )}
    )},
    {64: (
        {96.0: (
            {144.0: (
                216.0, 20736.0
            )}, 
            {9216.0: (
                13824.0, 84934656.0
            )}
        )},
        {4096: (
            {6144.0: (
                9216.0, 37748736.0
            )}, 
            {16777216: (
                25165824.0, 281474976710656
            )}
        )}
    )}
)}

"""